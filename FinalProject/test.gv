digraph ILoveThisProject{
rankdir=BT;
EagerChocolateBoiler [
 shape="record",
 color="blue"
 label="{EagerChocolateBoiler\n\<\<Singleton\>\>\n | - uniqueInstance : EagerChocolateBoiler\l|+ getInstance(): EagerChocolateBoiler\l
+ fill(): void\l
+ drain(): void\l
+ boil(): void\l
+ isEmpty(): boolean\l
+ isBoiled(): boolean\l
}" 
];
LazyChocolateBoiler [
 shape="record",
 color="blue"
 label="{LazyChocolateBoiler\n\<\<Singleton\>\>\n | - uniqueInstance : LazyChocolateBoiler\l|+ getInstance(): LazyChocolateBoiler\l
+ fill(): void\l
+ drain(): void\l
+ boil(): void\l
+ isEmpty(): boolean\l
+ isBoiled(): boolean\l
}" 
];
Runtime [
 shape="record",
 color="blue"
 label="{Runtime\n\<\<Singleton\>\>\n | - currentRuntime : Runtime\l|+ getRuntime(): java.lang.Runtime\l
+ exit(arg0: int): void\l
+ addShutdownHook(arg0: java.lang.Thread): void\l
+ removeShutdownHook(arg0: java.lang.Thread): boolean\l
+ halt(arg0: int): void\l
+ runFinalizersOnExit(arg0: boolean): void\l
+ exec(arg0: java.lang.String): java.lang.Process\l
+ exec(arg0: java.lang.String, arg1: java.lang.String[]): java.lang.Process\l
+ exec(arg0: java.lang.String, arg1: java.lang.String[], arg2: java.io.File): java.lang.Process\l
+ exec(arg0: java.lang.String[]): java.lang.Process\l
+ exec(arg0: java.lang.String[], arg1: java.lang.String[]): java.lang.Process\l
+ exec(arg0: java.lang.String[], arg1: java.lang.String[], arg2: java.io.File): java.lang.Process\l
+ availableProcessors(): int\l
+ freeMemory(): long\l
+ totalMemory(): long\l
+ maxMemory(): long\l
+ gc(): void\l
- runFinalization0(): void\l
+ runFinalization(): void\l
+ traceInstructions(arg0: boolean): void\l
+ traceMethodCalls(arg0: boolean): void\l
+ load(arg0: java.lang.String): void\l
- load0(arg0: java.lang.Class, arg1: java.lang.String): void\l
+ loadLibrary(arg0: java.lang.String): void\l
- loadLibrary0(arg0: java.lang.Class, arg1: java.lang.String): void\l
+ getLocalizedInputStream(arg0: java.io.InputStream): java.io.InputStream\l
+ getLocalizedOutputStream(arg0: java.io.OutputStream): java.io.OutputStream\l
}" 
];
Desktop [
 shape="record",
 color="null"
 label="{Desktop | - peer : DesktopPeer\l|+ getDesktop(): java.awt.Desktop\l
+ isDesktopSupported(): boolean\l
+ isSupported(arg0: java.awt.Desktop$Action): boolean\l
- checkFileValidation(arg0: java.io.File): void\l
- checkActionSupport(arg0: java.awt.Desktop$Action): void\l
- checkAWTPermission(): void\l
+ open(arg0: java.io.File): void\l
+ edit(arg0: java.io.File): void\l
+ print(arg0: java.io.File): void\l
+ browse(arg0: java.net.URI): void\l
+ mail(): void\l
+ mail(arg0: java.net.URI): void\l
- checkExec(): void\l
}" 
];
Calendar [
 shape="record",
 color="null"
 label="{\<\<abstract\>\>\n
Calendar | - zone : TimeZone\l- cachedLocaleData : ConcurrentMap\l- FIELD_NAME : String\l|+ getInstance(): java.util.Calendar\l
+ getInstance(arg0: java.util.TimeZone): java.util.Calendar\l
+ getInstance(arg0: java.util.Locale): java.util.Calendar\l
+ getInstance(arg0: java.util.TimeZone, arg1: java.util.Locale): java.util.Calendar\l
- createCalendar(arg0: java.util.TimeZone, arg1: java.util.Locale): java.util.Calendar\l
+ getAvailableLocales(): java.util.Locale[]\l
# computeTime(): void\{abstract\}\l
# computeFields(): void\{abstract\}\l
+ getTime(): java.util.Date\l
+ setTime(arg0: java.util.Date): void\l
+ getTimeInMillis(): long\l
+ setTimeInMillis(arg0: long): void\l
+ get(arg0: int): int\l
# internalGet(arg0: int): int\l
- internalSet(arg0: int, arg1: int): void\l
+ set(arg0: int, arg1: int): void\l
+ set(arg0: int, arg1: int, arg2: int): void\l
+ set(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int): void\l
+ set(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): void\l
+ clear(): void\l
+ clear(arg0: int): void\l
+ isSet(arg0: int): boolean\l
+ getDisplayName(arg0: int, arg1: int, arg2: java.util.Locale): java.lang.String\l
+ getDisplayNames(arg0: int, arg1: int, arg2: java.util.Locale): java.util.Map\l
- getDisplayNamesImpl(arg0: int, arg1: int, arg2: java.util.Locale): java.util.Map\l
- checkDisplayNameParams(arg0: int, arg1: int, arg2: int, arg3: int, arg4: java.util.Locale, arg5: int): boolean\l
- getFieldStrings(arg0: int, arg1: int, arg2: java.text.DateFormatSymbols): java.lang.String[]\l
# complete(): void\l
- isExternallySet(arg0: int): boolean\l
- getSetStateFields(): int\l
- setFieldsComputed(arg0: int): void\l
- setFieldsNormalized(arg0: int): void\l
- isPartiallyNormalized(): boolean\l
- isFullyNormalized(): boolean\l
- setUnnormalized(): void\l
- isFieldSet(arg0: int, arg1: int): boolean\l
- selectFields(): int\l
- getBaseStyle(arg0: int): int\l
- toStandaloneStyle(arg0: int): int\l
- isStandaloneStyle(arg0: int): boolean\l
- isNarrowStyle(arg0: int): boolean\l
- isNarrowFormatStyle(arg0: int): boolean\l
- aggregateStamp(arg0: int, arg1: int): int\l
+ getAvailableCalendarTypes(): java.util.Set\l
+ getCalendarType(): java.lang.String\l
+ equals(arg0: java.lang.Object): boolean\l
+ hashCode(): int\l
+ before(arg0: java.lang.Object): boolean\l
+ after(arg0: java.lang.Object): boolean\l
+ compareTo(arg0: java.util.Calendar): int\l
+ add(arg0: int, arg1: int): void\{abstract\}\l
+ roll(arg0: int, arg1: boolean): void\{abstract\}\l
+ roll(arg0: int, arg1: int): void\l
+ setTimeZone(arg0: java.util.TimeZone): void\l
+ getTimeZone(): java.util.TimeZone\l
- getZone(): java.util.TimeZone\l
- setZoneShared(arg0: boolean): void\l
+ setLenient(arg0: boolean): void\l
+ isLenient(): boolean\l
+ setFirstDayOfWeek(arg0: int): void\l
+ getFirstDayOfWeek(): int\l
+ setMinimalDaysInFirstWeek(arg0: int): void\l
+ getMinimalDaysInFirstWeek(): int\l
+ isWeekDateSupported(): boolean\l
+ getWeekYear(): int\l
+ setWeekDate(arg0: int, arg1: int, arg2: int): void\l
+ getWeeksInWeekYear(): int\l
+ getMinimum(arg0: int): int\{abstract\}\l
+ getMaximum(arg0: int): int\{abstract\}\l
+ getGreatestMinimum(arg0: int): int\{abstract\}\l
+ getLeastMaximum(arg0: int): int\{abstract\}\l
+ getActualMinimum(arg0: int): int\l
+ getActualMaximum(arg0: int): int\l
+ clone(): java.lang.Object\l
- getFieldName(arg0: int): java.lang.String\l
+ toString(): java.lang.String\l
- appendValue(arg0: java.lang.StringBuilder, arg1: java.lang.String, arg2: boolean, arg3: long): void\l
- setWeekCountData(arg0: java.util.Locale): void\l
- updateTime(): void\l
- compareTo(arg0: long): int\l
- getMillisOf(arg0: java.util.Calendar): long\l
- adjustStamp(): void\l
- invalidateWeekFields(): void\l
- writeObject(arg0: java.io.ObjectOutputStream): void\l
- readObject(arg0: java.io.ObjectInputStream): void\l
+ toInstant(): java.time.Instant\l
+ compareTo(arg0: java.lang.Object): int\l
}" 
];
EagerChocolateBoiler -> EagerChocolateBoiler [arrowhead="vee", style="solid", taillabel = "", color = ""];

LazyChocolateBoiler -> LazyChocolateBoiler [arrowhead="vee", style="solid", taillabel = "", color = ""];

Runtime -> Runtime [arrowhead="vee", style="solid", taillabel = "", color = ""];

Runtime -> Runtime [arrowhead="vee", style="dashed", taillabel = "", color = ""];

Desktop -> Desktop [arrowhead="vee", style="dashed", taillabel = "", color = ""];

Calendar -> Calendar [arrowhead="vee", style="dashed", taillabel = "", color = ""];

}