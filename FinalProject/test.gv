digraph ILoveThisProject{
rankdir=BT;
ArrayList [
 shape="record",
 label="{ArrayList | - EMPTY_ELEMENTDATA : Object\l- DEFAULTCAPACITY_EMPTY_ELEMENTDATA : Object\l- elementData : Object\l|+ trimToSize(): void\l
+ ensureCapacity(arg0: int): void\l
- ensureCapacityInternal(arg0: int): void\l
- ensureExplicitCapacity(arg0: int): void\l
- grow(arg0: int): void\l
- hugeCapacity(arg0: int): int\l
+ size(): int\l
+ isEmpty(): boolean\l
+ contains(arg0: java.lang.Object): boolean\l
+ indexOf(arg0: java.lang.Object): int\l
+ lastIndexOf(arg0: java.lang.Object): int\l
+ clone(): java.lang.Object\l
+ toArray(): java.lang.Object[]\l
+ toArray(arg0: java.lang.Object[]): java.lang.Object[]\l
- elementData(arg0: int): java.lang.Object\l
+ get(arg0: int): java.lang.Object\l
+ set(arg0: int, arg1: java.lang.Object): java.lang.Object\l
+ add(arg0: java.lang.Object): boolean\l
+ add(arg0: int, arg1: java.lang.Object): void\l
+ remove(arg0: int): java.lang.Object\l
+ remove(arg0: java.lang.Object): boolean\l
- fastRemove(arg0: int): void\l
+ clear(): void\l
+ addAll(arg0: java.util.Collection): boolean\l
+ addAll(arg0: int, arg1: java.util.Collection): boolean\l
# removeRange(arg0: int, arg1: int): void\l
- rangeCheck(arg0: int): void\l
- rangeCheckForAdd(arg0: int): void\l
- outOfBoundsMsg(arg0: int): java.lang.String\l
+ removeAll(arg0: java.util.Collection): boolean\l
+ retainAll(arg0: java.util.Collection): boolean\l
- batchRemove(arg0: java.util.Collection, arg1: boolean): boolean\l
- writeObject(arg0: java.io.ObjectOutputStream): void\l
- readObject(arg0: java.io.ObjectInputStream): void\l
+ listIterator(arg0: int): java.util.ListIterator\l
+ listIterator(): java.util.ListIterator\l
+ iterator(): java.util.Iterator\l
+ subList(arg0: int, arg1: int): java.util.List\l
- subListRangeCheck(arg0: int, arg1: int, arg2: int): void\l
+ forEach(arg0: java.util.function.Consumer): void\l
+ spliterator(): java.util.Spliterator\l
+ removeIf(arg0: java.util.function.Predicate): boolean\l
+ replaceAll(arg0: java.util.function.UnaryOperator): void\l
+ sort(arg0: java.util.Comparator): void\l
- access100(arg0: java.util.ArrayList): int\l
}" 
];
ArrayList -> ArrayList [arrowhead="vee", style="dashed", taillabel = ""];

}