digraph ILoveThisProject{
rankdir=BT;
ArrayList [
 shape="record",
 label="{ArrayList | - EMPTY_ELEMENTDATA : Object;\l- DEFAULTCAPACITY_EMPTY_ELEMENTDATA : Object;\l- elementData : Object;\l|+ trimToSize(): void\l
+ ensureCapacity(arg0: int): void\l
- ensureCapacityInternal(arg0: int): void\l
- ensureExplicitCapacity(arg0: int): void\l
- grow(arg0: int): void\l
- hugeCapacity(arg0: int): int\l
+ size(): int\l
+ isEmpty(): boolean\l
+ contains(arg0: java.lang.Object): boolean\l
+ indexOf(arg0: java.lang.Object): int\l
+ lastIndexOf(arg0: java.lang.Object): int\l
+ clone(): java.lang.Object\l
+ toArray(): java.lang.Object[]\l
+ toArray(arg0: java.lang.Object[]): java.lang.Object[]\l
- elementData(arg0: int): java.lang.Object\l
+ get(arg0: int): java.lang.Object\l
+ set(arg0: int, arg1: java.lang.Object): java.lang.Object\l
+ add(arg0: java.lang.Object): boolean\l
+ add(arg0: int, arg1: java.lang.Object): void\l
+ remove(arg0: int): java.lang.Object\l
+ remove(arg0: java.lang.Object): boolean\l
- fastRemove(arg0: int): void\l
+ clear(): void\l
+ addAll(arg0: java.util.Collection): boolean\l
+ addAll(arg0: int, arg1: java.util.Collection): boolean\l
# removeRange(arg0: int, arg1: int): void\l
- rangeCheck(arg0: int): void\l
- rangeCheckForAdd(arg0: int): void\l
- outOfBoundsMsg(arg0: int): java.lang.String\l
+ removeAll(arg0: java.util.Collection): boolean\l
+ retainAll(arg0: java.util.Collection): boolean\l
- batchRemove(arg0: java.util.Collection, arg1: boolean): boolean\l
- writeObject(arg0: java.io.ObjectOutputStream): void\l
- readObject(arg0: java.io.ObjectInputStream): void\l
+ listIterator(arg0: int): java.util.ListIterator\l
+ listIterator(): java.util.ListIterator\l
+ iterator(): java.util.Iterator\l
+ subList(arg0: int, arg1: int): java.util.List\l
- subListRangeCheck(arg0: int, arg1: int, arg2: int): void\l
+ forEach(arg0: java.util.function.Consumer): void\l
+ spliterator(): java.util.Spliterator\l
+ removeIf(arg0: java.util.function.Predicate): boolean\l
+ replaceAll(arg0: java.util.function.UnaryOperator): void\l
+ sort(arg0: java.util.Comparator): void\l
- access100(arg0: java.util.ArrayList): int\l
}" 
];
AbstractList [
 shape="record",
 label="{\<\<abstract\>\>\n
AbstractList | |+ add(arg0: java.lang.Object): boolean\l
+ get(arg0: int): java.lang.Object\{abstract\}\l
+ set(arg0: int, arg1: java.lang.Object): java.lang.Object\l
+ add(arg0: int, arg1: java.lang.Object): void\l
+ remove(arg0: int): java.lang.Object\l
+ indexOf(arg0: java.lang.Object): int\l
+ lastIndexOf(arg0: java.lang.Object): int\l
+ clear(): void\l
+ addAll(arg0: int, arg1: java.util.Collection): boolean\l
+ iterator(): java.util.Iterator\l
+ listIterator(): java.util.ListIterator\l
+ listIterator(arg0: int): java.util.ListIterator\l
+ subList(arg0: int, arg1: int): java.util.List\l
+ equals(arg0: java.lang.Object): boolean\l
+ hashCode(): int\l
# removeRange(arg0: int, arg1: int): void\l
- rangeCheckForAdd(arg0: int): void\l
- outOfBoundsMsg(arg0: int): java.lang.String\l
}" 
];
List [
 shape="record",
 label="{\<\<interface\>\>\n
List | |+ size(): int\{abstract\}\l
+ isEmpty(): boolean\{abstract\}\l
+ contains(arg0: java.lang.Object): boolean\{abstract\}\l
+ iterator(): java.util.Iterator\{abstract\}\l
+ toArray(): java.lang.Object[]\{abstract\}\l
+ toArray(arg0: java.lang.Object[]): java.lang.Object[]\{abstract\}\l
+ add(arg0: java.lang.Object): boolean\{abstract\}\l
+ remove(arg0: java.lang.Object): boolean\{abstract\}\l
+ containsAll(arg0: java.util.Collection): boolean\{abstract\}\l
+ addAll(arg0: java.util.Collection): boolean\{abstract\}\l
+ addAll(arg0: int, arg1: java.util.Collection): boolean\{abstract\}\l
+ removeAll(arg0: java.util.Collection): boolean\{abstract\}\l
+ retainAll(arg0: java.util.Collection): boolean\{abstract\}\l
+ replaceAll(arg0: java.util.function.UnaryOperator): void\l
+ sort(arg0: java.util.Comparator): void\l
+ clear(): void\{abstract\}\l
+ equals(arg0: java.lang.Object): boolean\{abstract\}\l
+ hashCode(): int\{abstract\}\l
+ get(arg0: int): java.lang.Object\{abstract\}\l
+ set(arg0: int, arg1: java.lang.Object): java.lang.Object\{abstract\}\l
+ add(arg0: int, arg1: java.lang.Object): void\{abstract\}\l
+ remove(arg0: int): java.lang.Object\{abstract\}\l
+ indexOf(arg0: java.lang.Object): int\{abstract\}\l
+ lastIndexOf(arg0: java.lang.Object): int\{abstract\}\l
+ listIterator(): java.util.ListIterator\{abstract\}\l
+ listIterator(arg0: int): java.util.ListIterator\{abstract\}\l
+ subList(arg0: int, arg1: int): java.util.List\{abstract\}\l
+ spliterator(): java.util.Spliterator\l
}" 
];
RandomAccess [
 shape="record",
 label="{\<\<interface\>\>\n
RandomAccess | |}" 
];
Cloneable [
 shape="record",
 label="{\<\<interface\>\>\n
Cloneable | |}" 
];
Serializable [
 shape="record",
 label="{\<\<interface\>\>\n
Serializable | |}" 
];
AbstractCollection [
 shape="record",
 label="{\<\<abstract\>\>\n
AbstractCollection | |+ iterator(): java.util.Iterator\{abstract\}\l
+ size(): int\{abstract\}\l
+ isEmpty(): boolean\l
+ contains(arg0: java.lang.Object): boolean\l
+ toArray(): java.lang.Object[]\l
+ toArray(arg0: java.lang.Object[]): java.lang.Object[]\l
- finishToArray(arg0: java.lang.Object[], arg1: java.util.Iterator): java.lang.Object[]\l
- hugeCapacity(arg0: int): int\l
+ add(arg0: java.lang.Object): boolean\l
+ remove(arg0: java.lang.Object): boolean\l
+ containsAll(arg0: java.util.Collection): boolean\l
+ addAll(arg0: java.util.Collection): boolean\l
+ removeAll(arg0: java.util.Collection): boolean\l
+ retainAll(arg0: java.util.Collection): boolean\l
+ clear(): void\l
+ toString(): java.lang.String\l
}" 
];
Object [
 shape="record",
 label="{Object | |- registerNatives(): void\l
+ getClass(): java.lang.Class\l
+ hashCode(): int\l
+ equals(arg0: java.lang.Object): boolean\l
# clone(): java.lang.Object\l
+ toString(): java.lang.String\l
+ notify(): void\l
+ notifyAll(): void\l
+ wait(arg0: long): void\l
+ wait(arg0: long, arg1: int): void\l
+ wait(): void\l
# finalize(): void\l
}" 
];
Collection [
 shape="record",
 label="{\<\<interface\>\>\n
Collection | |+ size(): int\{abstract\}\l
+ isEmpty(): boolean\{abstract\}\l
+ contains(arg0: java.lang.Object): boolean\{abstract\}\l
+ iterator(): java.util.Iterator\{abstract\}\l
+ toArray(): java.lang.Object[]\{abstract\}\l
+ toArray(arg0: java.lang.Object[]): java.lang.Object[]\{abstract\}\l
+ add(arg0: java.lang.Object): boolean\{abstract\}\l
+ remove(arg0: java.lang.Object): boolean\{abstract\}\l
+ containsAll(arg0: java.util.Collection): boolean\{abstract\}\l
+ addAll(arg0: java.util.Collection): boolean\{abstract\}\l
+ removeAll(arg0: java.util.Collection): boolean\{abstract\}\l
+ removeIf(arg0: java.util.function.Predicate): boolean\l
+ retainAll(arg0: java.util.Collection): boolean\{abstract\}\l
+ clear(): void\{abstract\}\l
+ equals(arg0: java.lang.Object): boolean\{abstract\}\l
+ hashCode(): int\{abstract\}\l
+ spliterator(): java.util.Spliterator\l
+ stream(): java.util.stream.Stream\l
+ parallelStream(): java.util.stream.Stream\l
}" 
];
Iterable [
 shape="record",
 label="{\<\<interface\>\>\n
Iterable | |+ iterator(): java.util.Iterator\{abstract\}\l
+ forEach(arg0: java.util.function.Consumer): void\l
+ spliterator(): java.util.Spliterator\l
}" 
];
ArrayList -> AbstractList [arrowhead="onormal", style="solid"];

ArrayList -> List [arrowhead="onormal", style="dashed"];

ArrayList -> RandomAccess [arrowhead="onormal", style="dashed"];

ArrayList -> Cloneable [arrowhead="onormal", style="dashed"];

ArrayList -> Serializable [arrowhead="onormal", style="dashed"];

AbstractList -> AbstractCollection [arrowhead="onormal", style="solid"];

AbstractList -> List [arrowhead="onormal", style="dashed"];

List -> Object [arrowhead="onormal", style="solid"];

List -> Collection [arrowhead="onormal", style="dashed"];

RandomAccess -> Object [arrowhead="onormal", style="solid"];

Cloneable -> Object [arrowhead="onormal", style="solid"];

Serializable -> Object [arrowhead="onormal", style="solid"];

AbstractCollection -> Object [arrowhead="onormal", style="solid"];

AbstractCollection -> Collection [arrowhead="onormal", style="dashed"];

Collection -> Object [arrowhead="onormal", style="solid"];

Collection -> Iterable [arrowhead="onormal", style="dashed"];

Iterable -> Object [arrowhead="onormal", style="solid"];

}