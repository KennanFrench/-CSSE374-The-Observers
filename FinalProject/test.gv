digraph ILoveThisProject{
rankdir=BT;
ArrowConverter [
 shape="record",
 label="{ArrowConverter | |+ convert(): void\l
+ getGraphVizRep(): java.lang.String\l
+ getVis(): Visibility\l
}" 
];
Category [
 shape="record",
 label="{Category | + CLASS : LCategory;\l+ ABSTRACT : LCategory;\l+ INTERFACE : LCategory;\l|+ values(): Category[]\l
+ valueOf(arg0: java.lang.String): Category\l
}" 
];
ClassConverter [
 shape="record",
 label="{ClassConverter | |+ convert(): void\l
+ getGraphVizRep(): java.lang.String\l
}" 
];
ClassParser [
 shape="record",
 label="{ClassParser | |+ parse(): void\l
+ getNode(): org.objectweb.asm.tree.ClassNode\l
+ getuClass(): UMLClass\l
+ getArrows(): java.util.ArrayList\l
}" 
];
CommandLineParser [
 shape="record",
 label="{CommandLineParser | |+ parse(): void\l
+ getClassList(): java.util.ArrayList\l
+ getRunVis(): Visibility\l
+ getDrawRecursive(): boolean\l
}" 
];
Converter [
 shape="record",
 label="{\<\<interface\>\>\n
Converter | |+ convert(): void\{abstract\}\l
+ getGraphVizRep(): java.lang.String\{abstract\}\l
}" 
];
ConverterFactory [
 shape="record",
 label="{ConverterFactory | |+ createConverter(arg0: UMLElement, arg1: Visibility): Converter\l
}" 
];
DesignConverter [
 shape="record",
 label="{DesignConverter | |+ convert(): void\l
+ getGraphVizRep(): java.lang.String\l
}" 
];
DesignParser [
 shape="record",
 label="{DesignParser | |+ runParser(arg0: java.lang.String[]): void\l
+ getClassList(): java.util.ArrayList\l
+ getArrowList(): java.util.ArrayList\l
+ getRunVis(): Visibility\l
}" 
];
FieldParser [
 shape="record",
 label="{FieldParser | |+ parse(): void\l
+ getField(): org.objectweb.asm.tree.FieldNode\l
+ getuField(): UMLField\l
}" 
];
HeadType [
 shape="record",
 label="{HeadType | + OPEN : LHeadType;\l+ CLOSED : LHeadType;\l+ FILLED : LHeadType;\l+ DIAMOND : LHeadType;\l|+ getGraphVizRep(): java.lang.String\l
+ values(): HeadType[]\l
+ valueOf(arg0: java.lang.String): HeadType\l
}" 
];
Launcher [
 shape="record",
 label="{Launcher | |+ main(arg0: java.lang.String[]): void\l
+ getNiceName(arg0: java.lang.String): java.lang.String\l
+ getDotName(arg0: java.lang.String): java.lang.String\l
}" 
];
LineType [
 shape="record",
 label="{LineType | + SOLID : LLineType;\l+ DASHED : LLineType;\l+ DOTTED : LLineType;\l|+ getGraphVizRep(): java.lang.String\l
+ values(): LineType[]\l
+ valueOf(arg0: java.lang.String): LineType\l
}" 
];
MethodParser [
 shape="record",
 label="{MethodParser | |+ parse(): void\l
+ getMethod(): org.objectweb.asm.tree.MethodNode\l
+ getuMethod(): UMLMethod\l
}" 
];
Parser [
 shape="record",
 label="{\<\<interface\>\>\n
Parser | |+ parse(): void\{abstract\}\l
}" 
];
UMLArrow [
 shape="record",
 label="{UMLArrow | |+ getHeadType(): HeadType\l
+ setHeadType(arg0: HeadType): void\l
+ getLineType(): LineType\l
+ setLineType(arg0: LineType): void\l
+ getStart(): java.lang.String\l
+ setStart(arg0: java.lang.String): void\l
+ getEnd(): java.lang.String\l
+ setEnd(arg0: java.lang.String): void\l
}" 
];
UMLClass [
 shape="record",
 label="{UMLClass | |+ getName(): java.lang.String\l
+ setName(arg0: java.lang.String): void\l
+ getCategory(): Category\l
+ setCategory(arg0: Category): void\l
+ getFields(): java.util.ArrayList\l
+ setFields(arg0: java.util.ArrayList): void\l
+ getMethods(): java.util.ArrayList\l
+ setMethods(arg0: java.util.ArrayList): void\l
}" 
];
UMLElement [
 shape="record",
 label="{\<\<interface\>\>\n
UMLElement | |}" 
];
UMLField [
 shape="record",
 label="{UMLField | |+ getVisibility(): Visibility\l
+ setVisibility(arg0: Visibility): void\l
+ getName(): java.lang.String\l
+ setName(arg0: java.lang.String): void\l
+ getType(): java.lang.String\l
+ setType(arg0: java.lang.String): void\l
}" 
];
UMLMethod [
 shape="record",
 label="{UMLMethod | |+ getName(): java.lang.String\l
+ setName(arg0: java.lang.String): void\l
+ getVisibility(): Visibility\l
+ setVisibility(arg0: Visibility): void\l
+ isAbstract(): boolean\l
+ setAbstract(arg0: boolean): void\l
+ getType(): java.lang.String\l
+ setType(arg0: java.lang.String): void\l
+ getParameters(): java.util.ArrayList\l
+ setParameters(arg0: java.util.ArrayList): void\l
}" 
];
UMLParam [
 shape="record",
 label="{UMLParam | |+ getName(): java.lang.String\l
+ getType(): java.lang.String\l
}" 
];
Visibility [
 shape="record",
 label="{Visibility | + PRIVATE : LVisibility;\l+ PROTECTED : LVisibility;\l+ PUBLIC : LVisibility;\l|+ getVisibilityCode(): java.lang.String\l
+ values(): Visibility[]\l
+ valueOf(arg0: java.lang.String): Visibility\l
}" 
];
FieldConverter [
 shape="record",
 label="{FieldConverter | |+ convert(): void\l
+ getGraphVizRep(): java.lang.String\l
}" 
];
MethodConverter [
 shape="record",
 label="{MethodConverter | |+ convert(): void\l
+ getGraphVizRep(): java.lang.String\l
}" 
];
ArrowConverter -> Converter [arrowhead="onormal", style="dashed"];

ClassConverter -> Converter [arrowhead="onormal", style="dashed"];

ClassParser -> Parser [arrowhead="onormal", style="dashed"];

CommandLineParser -> Parser [arrowhead="onormal", style="dashed"];

FieldParser -> Parser [arrowhead="onormal", style="dashed"];

MethodParser -> Parser [arrowhead="onormal", style="dashed"];

UMLArrow -> UMLElement [arrowhead="onormal", style="dashed"];

UMLClass -> UMLElement [arrowhead="onormal", style="dashed"];

UMLField -> UMLElement [arrowhead="onormal", style="dashed"];

UMLMethod -> UMLElement [arrowhead="onormal", style="dashed"];

UMLParam -> UMLElement [arrowhead="onormal", style="dashed"];

FieldConverter -> Converter [arrowhead="onormal", style="dashed"];

MethodConverter -> Converter [arrowhead="onormal", style="dashed"];

}